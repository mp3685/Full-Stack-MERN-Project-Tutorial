{"ast":null,"code":"/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport { exactProp } from '@material-ui/utils';\n/**\r\n * Utility component that locks focus inside the component.\r\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n    _props$disableAutoFoc = props.disableAutoFocus,\n    disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n    _props$disableEnforce = props.disableEnforceFocus,\n    disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n    _props$disableRestore = props.disableRestoreFocus,\n    disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n    getDoc = props.getDoc,\n    isEnabled = props.isEnabled,\n    open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(function () {\n    prevOpenRef.current = open;\n  }, [open]);\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n      rootRef.current.focus();\n    }\n    var contain = function contain() {\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\n      // Contain can be called between the component being unmounted and its cleanup function being run.\n\n      if (rootElement === null) {\n        return;\n      }\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n    var loopFocus = function loopFocus(event) {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      contain();\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * A single child content element.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\r\n   * replace it to the last focused element when it closes.\r\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\n  disableAutoFocus: PropTypes.bool,\n  /**\r\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\n  disableEnforceFocus: PropTypes.bool,\n  /**\r\n   * If `true`, the trap focus will not restore focus to previously focused element once\r\n   * trap focus is hidden.\r\n   */\n  disableRestoreFocus: PropTypes.bool,\n  /**\r\n   * Return the document to consider.\r\n   * We use it to implement the restore focus between different browser documents.\r\n   */\n  getDoc: PropTypes.func.isRequired,\n  /**\r\n   * Do we still want to enforce the focus?\r\n   * This prop helps nesting TrapFocus elements.\r\n   */\n  isEnabled: PropTypes.func.isRequired,\n  /**\r\n   * If `true`, focus will be locked.\r\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\nexport default Unstable_TrapFocus;","map":{"version":3,"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","exactProp","Unstable_TrapFocus","props","children","_props$disableAutoFoc","disableAutoFocus","_props$disableEnforce","disableEnforceFocus","_props$disableRestore","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","rootRef","handleOwnRef","useCallback","instance","current","findDOMNode","handleRef","ref","prevOpenRef","useEffect","window","activeElement","doc","contains","hasAttribute","process","env","NODE_ENV","console","error","join","setAttribute","focus","contain","rootElement","hasFocus","loopFocus","event","keyCode","shiftKey","addEventListener","interval","setInterval","clearInterval","removeEventListener","createElement","Fragment","tabIndex","cloneElement","propTypes","node","bool","func","isRequired"],"sources":["C:/Users/mjper/OneDrive/Documents/Coding Projects/Full-Stack-MERN-Project-Tutorial/client/node_modules/@material-ui/core/esm/Unstable_TrapFocus/Unstable_TrapFocus.js"],"sourcesContent":["/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport ownerDocument from '../utils/ownerDocument';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport { exactProp } from '@material-ui/utils';\r\n/**\r\n * Utility component that locks focus inside the component.\r\n */\r\n\r\nfunction Unstable_TrapFocus(props) {\r\n  var children = props.children,\r\n      _props$disableAutoFoc = props.disableAutoFocus,\r\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\r\n      _props$disableEnforce = props.disableEnforceFocus,\r\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\r\n      _props$disableRestore = props.disableRestoreFocus,\r\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\r\n      getDoc = props.getDoc,\r\n      isEnabled = props.isEnabled,\r\n      open = props.open;\r\n  var ignoreNextEnforceFocus = React.useRef();\r\n  var sentinelStart = React.useRef(null);\r\n  var sentinelEnd = React.useRef(null);\r\n  var nodeToRestore = React.useRef();\r\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\r\n\r\n  var handleOwnRef = React.useCallback(function (instance) {\r\n    // #StrictMode ready\r\n    rootRef.current = ReactDOM.findDOMNode(instance);\r\n  }, []);\r\n  var handleRef = useForkRef(children.ref, handleOwnRef);\r\n  var prevOpenRef = React.useRef();\r\n  React.useEffect(function () {\r\n    prevOpenRef.current = open;\r\n  }, [open]);\r\n\r\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\r\n    // WARNING: Potentially unsafe in concurrent mode.\r\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\r\n    // Say we render `open={false}` -> `open={true}` but never commit.\r\n    // We have now written a state that wasn't committed. But no committed effect\r\n    // will read this wrong value. We only read from `nodeToRestore` in effects\r\n    // that were committed on `open={true}`\r\n    // WARNING: Prevents the instance from being garbage collected. Should only\r\n    // hold a weak ref.\r\n    nodeToRestore.current = getDoc().activeElement;\r\n  }\r\n\r\n  React.useEffect(function () {\r\n    if (!open) {\r\n      return;\r\n    }\r\n\r\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\r\n\r\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\r\n      if (!rootRef.current.hasAttribute('tabIndex')) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\r\n        }\r\n\r\n        rootRef.current.setAttribute('tabIndex', -1);\r\n      }\r\n\r\n      rootRef.current.focus();\r\n    }\r\n\r\n    var contain = function contain() {\r\n      var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.\r\n      // Contain can be called between the component being unmounted and its cleanup function being run.\r\n\r\n      if (rootElement === null) {\r\n        return;\r\n      }\r\n\r\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\r\n        ignoreNextEnforceFocus.current = false;\r\n        return;\r\n      }\r\n\r\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\r\n        rootRef.current.focus();\r\n      }\r\n    };\r\n\r\n    var loopFocus = function loopFocus(event) {\r\n      // 9 = Tab\r\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\r\n        return;\r\n      } // Make sure the next tab starts from the right place.\r\n\r\n\r\n      if (doc.activeElement === rootRef.current) {\r\n        // We need to ignore the next contain as\r\n        // it will try to move the focus back to the rootRef element.\r\n        ignoreNextEnforceFocus.current = true;\r\n\r\n        if (event.shiftKey) {\r\n          sentinelEnd.current.focus();\r\n        } else {\r\n          sentinelStart.current.focus();\r\n        }\r\n      }\r\n    };\r\n\r\n    doc.addEventListener('focus', contain, true);\r\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\r\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\r\n    //\r\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\r\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\r\n\r\n    var interval = setInterval(function () {\r\n      contain();\r\n    }, 50);\r\n    return function () {\r\n      clearInterval(interval);\r\n      doc.removeEventListener('focus', contain, true);\r\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\r\n\r\n      if (!disableRestoreFocus) {\r\n        // In IE 11 it is possible for document.activeElement to be null resulting\r\n        // in nodeToRestore.current being null.\r\n        // Not all elements in IE 11 have a focus method.\r\n        // Once IE 11 support is dropped the focus() call can be unconditional.\r\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\r\n          nodeToRestore.current.focus();\r\n        }\r\n\r\n        nodeToRestore.current = null;\r\n      }\r\n    };\r\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\r\n    tabIndex: 0,\r\n    ref: sentinelStart,\r\n    \"data-test\": \"sentinelStart\"\r\n  }), /*#__PURE__*/React.cloneElement(children, {\r\n    ref: handleRef\r\n  }), /*#__PURE__*/React.createElement(\"div\", {\r\n    tabIndex: 0,\r\n    ref: sentinelEnd,\r\n    \"data-test\": \"sentinelEnd\"\r\n  }));\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * A single child content element.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\r\n   * replace it to the last focused element when it closes.\r\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\r\n  disableAutoFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\r\n  disableEnforceFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not restore focus to previously focused element once\r\n   * trap focus is hidden.\r\n   */\r\n  disableRestoreFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * Return the document to consider.\r\n   * We use it to implement the restore focus between different browser documents.\r\n   */\r\n  getDoc: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Do we still want to enforce the focus?\r\n   * This prop helps nesting TrapFocus elements.\r\n   */\r\n  isEnabled: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * If `true`, focus will be locked.\r\n   */\r\n  open: PropTypes.bool.isRequired\r\n} : void 0;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\r\n}\r\n\r\nexport default Unstable_TrapFocus;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}