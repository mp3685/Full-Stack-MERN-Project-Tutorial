{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n    classes = props.classes,\n    className = props.className,\n    _props$disableTypogra = props.disableTypography,\n    disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n    _props$inset = props.inset,\n    inset = _props$inset === void 0 ? false : _props$inset,\n    primaryProp = props.primary,\n    primaryTypographyProps = props.primaryTypographyProps,\n    secondaryProp = props.secondary,\n    secondaryTypographyProps = props.secondaryTypographyProps,\n    other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n  var _React$useContext = React.useContext(ListContext),\n    dense = _React$useContext.dense;\n  var primary = primaryProp != null ? primaryProp : children;\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n  var secondary = secondaryProp;\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Alias for the `primary` prop.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * If `true`, the children won't be wrapped by a Typography component.\r\n   * This can be useful to render an alternative Typography variant by wrapping\r\n   * the `children` (or `primary`) text, and optional `secondary` text\r\n   * with the Typography component.\r\n   */\n  disableTypography: PropTypes.bool,\n  /**\r\n   * If `true`, the children will be indented.\r\n   * This should be used if there is no left avatar or left icon.\r\n   */\n  inset: PropTypes.bool,\n  /**\r\n   * The main content element.\r\n   */\n  primary: PropTypes.node,\n  /**\r\n   * These props will be forwarded to the primary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\n  primaryTypographyProps: PropTypes.object,\n  /**\r\n   * The secondary content element.\r\n   */\n  secondary: PropTypes.node,\n  /**\r\n   * These props will be forwarded to the secondary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\n  secondaryTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","map":{"version":3,"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","Typography","ListContext","styles","root","flex","minWidth","marginTop","marginBottom","multiline","dense","inset","paddingLeft","primary","secondary","ListItemText","forwardRef","props","ref","children","classes","className","_props$disableTypogra","disableTypography","_props$inset","primaryProp","primaryTypographyProps","secondaryProp","secondaryTypographyProps","other","_React$useContext","useContext","type","createElement","variant","component","display","color","process","env","NODE_ENV","propTypes","node","object","string","bool","name"],"sources":["C:/Users/mjper/OneDrive/Documents/Coding Projects/Full-Stack-MERN-Project-Tutorial/client/node_modules/@material-ui/core/esm/ListItemText/ListItemText.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport withStyles from '../styles/withStyles';\r\nimport Typography from '../Typography';\r\nimport ListContext from '../List/ListContext';\r\nexport var styles = {\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    flex: '1 1 auto',\r\n    minWidth: 0,\r\n    marginTop: 4,\r\n    marginBottom: 4\r\n  },\r\n\r\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\r\n  multiline: {\r\n    marginTop: 6,\r\n    marginBottom: 6\r\n  },\r\n\r\n  /* Styles applied to the `Typography` components if dense. */\r\n  dense: {},\r\n\r\n  /* Styles applied to the root element if `inset={true}`. */\r\n  inset: {\r\n    paddingLeft: 56\r\n  },\r\n\r\n  /* Styles applied to the primary `Typography` component. */\r\n  primary: {},\r\n\r\n  /* Styles applied to the secondary `Typography` component. */\r\n  secondary: {}\r\n};\r\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\r\n  var children = props.children,\r\n      classes = props.classes,\r\n      className = props.className,\r\n      _props$disableTypogra = props.disableTypography,\r\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\r\n      _props$inset = props.inset,\r\n      inset = _props$inset === void 0 ? false : _props$inset,\r\n      primaryProp = props.primary,\r\n      primaryTypographyProps = props.primaryTypographyProps,\r\n      secondaryProp = props.secondary,\r\n      secondaryTypographyProps = props.secondaryTypographyProps,\r\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\r\n\r\n  var _React$useContext = React.useContext(ListContext),\r\n      dense = _React$useContext.dense;\r\n\r\n  var primary = primaryProp != null ? primaryProp : children;\r\n\r\n  if (primary != null && primary.type !== Typography && !disableTypography) {\r\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\r\n      variant: dense ? 'body2' : 'body1',\r\n      className: classes.primary,\r\n      component: \"span\",\r\n      display: \"block\"\r\n    }, primaryTypographyProps), primary);\r\n  }\r\n\r\n  var secondary = secondaryProp;\r\n\r\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\r\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\r\n      variant: \"body2\",\r\n      className: classes.secondary,\r\n      color: \"textSecondary\",\r\n      display: \"block\"\r\n    }, secondaryTypographyProps), secondary);\r\n  }\r\n\r\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\r\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\r\n    ref: ref\r\n  }, other), primary, secondary);\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Alias for the `primary` prop.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * If `true`, the children won't be wrapped by a Typography component.\r\n   * This can be useful to render an alternative Typography variant by wrapping\r\n   * the `children` (or `primary`) text, and optional `secondary` text\r\n   * with the Typography component.\r\n   */\r\n  disableTypography: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the children will be indented.\r\n   * This should be used if there is no left avatar or left icon.\r\n   */\r\n  inset: PropTypes.bool,\r\n\r\n  /**\r\n   * The main content element.\r\n   */\r\n  primary: PropTypes.node,\r\n\r\n  /**\r\n   * These props will be forwarded to the primary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\r\n  primaryTypographyProps: PropTypes.object,\r\n\r\n  /**\r\n   * The secondary content element.\r\n   */\r\n  secondary: PropTypes.node,\r\n\r\n  /**\r\n   * These props will be forwarded to the secondary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\r\n  secondaryTypographyProps: PropTypes.object\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiListItemText'\r\n})(ListItemText);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}